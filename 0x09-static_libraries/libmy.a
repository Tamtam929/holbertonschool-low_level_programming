!<arch>
0-isupper.c/    0           0     0     644     231       `
#include "main.h"
#include <stdio.h>
/**
 * _isupper - checks for uppercase character
 * @c: the character is to be checked
 * Return: 1 if c is uppercase, 0 if otherwise
 */
int _isupper(int c)
{
	return (c >= 'A' && c <= 'Z');
}

0-memset.c/     0           0     0     644     328       `
#include "main.h"
/**
 * _memset - fills memory with a constant byte
 * @s: memory space to be filled
 * @b: byte to fill with
 * @n: number of spaces to fill
 * Return: pointer to memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{

	unsigned int i;
	for (i = 0; i < n; i++)
	{
		*(s + i) = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     312       `
#include "main.h"
/**
 * _strcat - a function that concatenates two strings
 * @dest: copy to
 * @src: copy from
 * Return: two concat strings
 */
char *_strcat(char *dest, char *src)
{
	int i, n;
	for (i = 0; dest[i] != '\0'; i++)
	{
	}
	for (n = 0; (dest[i + n] = *src++) != '\0'; n++)
	{
	}
	return (dest);
}
100-atoi.c/     0           0     0     644     51        `
#include "main.h"
int _atoi(void)
{
	return (0);
}

1-isdigit.c/    0           0     0     644     220       `
#include "main.h"
/**
 * _isdigit - checks for a digit (0 through 9)
 * @c: int to be checked
 * return: 1 if c is a digit, 0 if not
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     254       `
#include "main.h"
/**
 * _memcpy - copies memory area
 * @dest:char
 * @src:char
 * @n:int
 * Return:char pointer
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;
	for (i = 0; i < n; i++)
		dest[i] = src[i];
	return (dest);
}
1-strncat.c/    0           0     0     644     361       `
#include "main.h"
/**
 * _strncat - a function that concatenates two strings
 * @dest: copy to
 * @src: copy from
 * @n: n
 * Return: always 0
 */
char *_strncat(char *dest, char *src, int n)
{
	int i, j;
	i = 0;
	j = 0;
	while (dest[i] != '\0')
		i++;
	while (src[j] != '\0' && j < n)
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     339       `
#include "main.h"
/**
 * _strchr - locates a character in a string
 * @s: string to check
 * @c: character to check for
 * Return: pointer to spot in s with c or null
 */
char *_strchr(char *s, char c)
{
	int i;
	for (i = 0; *(s + i); i++)
	{
		if (*(s + i) == c)
			return (s + i);
	}
	if (*(s + i) == c)
		return (s + i);
	return (0);
}

2-strlen.c/     0           0     0     644     224       `
#include "main.h"
/**
 * _strlen - returns the length of a string
 * @s: string to evaluate
 *
 * Return: the length of the string
 */
int _strlen(char *s)
{
	int i;
	i = 0;
	while (s[i] != '\0')
	{
		i++;
	}
	return (i);
}
2-strncpy.c/    0           0     0     644     343       `
#include "main.h"
/**
 * _strncpy - a function that copies a string
 * @dest: copy to
 * @src: copy from
 * @n: input number of char
 * Return: Always 0 (Success)
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;
	for (i = 0; src[i] != '\0'; i++)
		if (i < n)
			dest[i] = src[i];
	while (i < n)
		dest[i++] = '\0';
	return (dest);
}

3-islower.c/    0           0     0     644     198       `
#include "main.h"
/**
 * _islower - check lower case.
 * @c:  charhacter
 * Return: Always 0.
 */
int _islower(int c)
{
	if ((c >= 97) && (c <= 122))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.c/       0           0     0     644     216       `
#include "main.h"
/**
 * _puts - prints a string to stdout
 * @str: pointer to the string to print
 */

void _puts(char *str)
{
	int i;
	for (i = 0; str[i] != '\0'; i++)
	{

		_putchar(str[i]);
	}
	_putchar('\n');
}
3-strncmp.c/    0           0     0     644     304       `
#include "main.h"
/**
 * _strcmp - a function that compares two strings
 * @s1: input one
 * @s2: input two
 * Return: Always 0 (Success)
 */
int _strcmp(char *s1, char *s2)
{
	int i;
	for (i = 0; s1[i] != '\0' && s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
			return (s1[i] - s2[i]);
	}
	return (0);
}
3-strspn.c/     0           0     0     644     387       `
#include "main.h"
/**
 * _strspn - gets lengthof a prefix substring
 * @s: string to check
 * @accept: string to check against
 * Return: number of bytes of s in accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j;
	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
				break;
		}
		if (!accept[j])
			break;
	}
	return (i);
}

4-isalpha.c/    0           0     0     644     301       `
#include "main.h"
/**
 * _isalpha - a function that checks for alphabetic character
 * @c: single letter input
 * Return: 1 if c is a letter (lower or uppercase), 0 otherwise
 */
int _isalpha(char c)
{
	if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')))
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     310       `
#include "main.h"
/**
 * _strpbrk -  searches a string for any of a set of bytes
 * @s:string
 * @accept:string
 * Return:char
 */
char *_strpbrk(char *s, char *accept)
{
	int i;
	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				return (s);
			}
		}
		s++;
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     540       `
#include "main.h"
/**
 * _strstr - locates a substring
 * @haystack: string in which to check for needle
 * @needle: substring to find in haystack
 * Return: pointer to beginning of needle in haystack or NULL if no match
 */
char *_strstr(char *haystack, char *needle)
{
	unsigned int i = 0, j = 0;
	while (haystack[i])
	{
		while (needle[j] && (haystack[i] == needle[0]))
		{
			if (haystack[i + j] == needle[j])
				j++;
			else
				break;
		}
		if (needle[j])
		{
			i++;
			j = 0;
		}
		else
			return (haystack + i);
	}
	return (0);
}
6-abs.c/        0           0     0     644     254       `
#include "main.h"
/**
 *  *_abs - compute absolute value of integer
 *   * @n: integer argument
 *    * Return: absolute value
 *     */
int _abs(int n)
{
	  if (n > 0)
		      return (n);
	    else if (n < 0)
		        return (-n);
	      return (0);
}
9-strcpy.c/     0           0     0     644     467       `
#include "main.h"
/**
 * *_strcpy - copies the string pointed to by src
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int len, i;
	len = 0;
	while (src[len] != '\0')
	{
		len++;
	}
	for (i = 0; i < len; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

